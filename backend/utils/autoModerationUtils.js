// üõ°Ô∏è AUTO-MODERATION UTILITIES
// H·ªá th·ªëng t·ª± ƒë·ªông ph√°t hi·ªán v√† x·ª≠ l√Ω n·ªôi dung vi ph·∫°m trong forum

/**
 * ============================================================================
 * üî• CONFIGURATION - DANH S√ÅCH T·ª™ KH√ìA VI PH·∫†M
 * ============================================================================
 * C√≥ th·ªÉ ƒë∆∞·ª£c load t·ª´ database ho·∫∑c config file trong t∆∞∆°ng lai
 */

// Danh s√°ch t·ª´ kh√≥a nh·∫°y c·∫£m (c√≥ th·ªÉ m·ªü r·ªông)
const BANNED_WORDS = [
  // üö´ T·ª´ ng·ªØ t·ª•c tƒ©u ti·∫øng Vi·ªát (Level: HIGH) - ƒê√É NORMALIZE
  "du", // ƒë·ª•
  "dit", // ƒë·ªãt
  "lon", // l·ªìn
  "cac", // c·∫∑c
  "buoi", // bu·ªìi
  "di", // ƒëƒ©
  "cave",
  "gai goi", // g√°i g·ªçi

  // ‚öîÔ∏è T·ª´ ng·ªØ k√≠ch ƒë·ªông b·∫°o l·ª±c (Level: HIGH) - ƒê√É NORMALIZE
  "giet", // gi·∫øt
  "chet di", // ch·∫øt ƒëi
  "tu tu", // t·ª± t·ª≠
  "dot", // ƒë·ªët
  "pha hoai", // ph√° ho·∫°i
  "bom",
  "khung bo", // kh·ªßng b·ªë

  // üé≠ T·ª´ ng·ªØ ph√¢n bi·ªát ch·ªßng t·ªôc (Level: HIGH) - ƒê√É NORMALIZE
  "tau khua", // t√†u kh·ª±a
  "khi den", // kh·ªâ ƒëen
  "moi ro", // m·ªçi r·ª£
  "dan toc thieu so", // d√¢n t·ªôc thi·ªÉu s·ªë

  // üí∞ Spam keywords (Level: MEDIUM) - ƒê√É NORMALIZE
  "ban hang", // b√°n h√†ng
  "kiem tien", // ki·∫øm ti·ªÅn
  "lam giau", // l√†m gi√†u
  "dau tu", // ƒë·∫ßu t∆∞
  "forex",
  "crypto",
  "MLM",
  "ban thuoc", // b√°n thu·ªëc
  "ban duoc", // b√°n d∆∞·ª£c
  "quang cao", // qu·∫£ng c√°o

  // üîû N·ªôi dung ng∆∞·ªùi l·ªõn (Level: HIGH) - ƒê√É NORMALIZE
  "sex",
  "porn",
  "xxx",
  "18+",
  "phim nguoi lon", // phim ng∆∞·ªùi l·ªõn
];

// ü§ñ Patterns spam ph·ªï bi·∫øn v·ªõi tr·ªçng s·ªë r·ªßi ro
const SPAM_PATTERNS = [
  { pattern: /\b\d{10,11}\b/g, weight: 15, description: "S·ªë ƒëi·ªán tho·∫°i" },
  { pattern: /\b\w+@\w+\.\w+\b/g, weight: 10, description: "Email" },
  { pattern: /\bhttp[s]?:\/\/\S+/g, weight: 20, description: "URL/Link" },
  {
    pattern: /\b(zalo|telegram|facebook|fb|viber|skype|whatsapp)\b/gi,
    weight: 12,
    description: "App li√™n l·∫°c",
  },
  {
    pattern: /[!@#$%^&*]{3,}/g,
    weight: 8,
    description: "K√Ω t·ª± ƒë·∫∑c bi·ªát li√™n t·ª•c",
  },
  { pattern: /(.)\1{4,}/g, weight: 5, description: "L·∫∑p k√Ω t·ª±" },
  {
    pattern: /\b(mua|b√°n|gi√°|ti·ªÅn|vnƒë|usd)\b/gi,
    weight: 7,
    description: "T·ª´ kh√≥a th∆∞∆°ng m·∫°i",
  },
];

/**
 * ============================================================================
 * üéØ CORE ANALYSIS FUNCTIONS
 * ============================================================================
 */

/**
 * üîç FUNCTION: Ki·ªÉm tra n·ªôi dung c√≥ ch·ª©a t·ª´ ng·ªØ nh·∫°y c·∫£m kh√¥ng
 * @param {string} content - N·ªôi dung c·∫ßn ki·ªÉm tra
 * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch profanity
 *
 * @logic WORKFLOW:
 * 1. Normalize text (b·ªè d·∫•u, lowercase)
 * 2. Check t·ª´ng banned word
 * 3. T√≠nh severity d·ª±a tr√™n s·ªë l∆∞·ª£ng vi ph·∫°m
 * 4. Return analysis result
 */
export const checkProfanity = (content) => {
  // üîß NORMALIZE - Chu·∫©n h√≥a text ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
  const normalizedContent = content
    .toLowerCase()
    .normalize("NFD") // T√°ch c√°c k√Ω t·ª± c√≥ d·∫•u
    .replace(/[\u0300-\u036f]/g, "") // B·ªè d·∫•u ti·∫øng Vi·ªát
    .replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, " ") // Thay th·∫ø k√Ω t·ª± ƒë·∫∑c bi·ªát
    .replace(/\s+/g, " "); // Normalize spaces

  const violatedWords = [];
  const violationPositions = []; // Track v·ªã tr√≠ vi ph·∫°m ƒë·ªÉ highlight

  // üîç SCAN - Qu√©t t·ª´ng banned word
  for (const word of BANNED_WORDS) {
    const normalizedWord = word.toLowerCase();
    const wordIndex = normalizedContent.indexOf(normalizedWord);

    if (wordIndex !== -1) {
      violatedWords.push(word);
      violationPositions.push({
        word: word,
        position: wordIndex,
        originalWord: content.substr(wordIndex, word.length),
      });
    }
  }

  // üìä SEVERITY CALCULATION - T√≠nh m·ª©c ƒë·ªô nghi√™m tr·ªçng
  let severity = "low";
  let riskScore = 0;

  if (violatedWords.length > 3) {
    severity = "critical";
    riskScore = 100; // Auto-reject
  } else if (violatedWords.length > 1) {
    severity = "high";
    riskScore = 80;
  } else if (violatedWords.length > 0) {
    severity = "medium";
    riskScore = 50;
  }

  return {
    isViolation: violatedWords.length > 0,
    violatedWords,
    violationPositions,
    severity,
    riskScore,
    totalViolations: violatedWords.length,
  };
};

/**
 * üïµÔ∏è FUNCTION: Ki·ªÉm tra n·ªôi dung c√≥ d·∫•u hi·ªáu spam kh√¥ng
 * @param {string} content - N·ªôi dung c·∫ßn ki·ªÉm tra
 * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch spam
 *
 * @logic WORKFLOW:
 * 1. Check spam patterns v·ªõi tr·ªçng s·ªë
 * 2. Analyze content structure (length, caps, repetition)
 * 3. Calculate total risk score
 * 4. Determine spam classification
 */
export const checkSpam = (content) => {
  const spamIndicators = [];
  let riskScore = 0;
  const analysisDetails = [];

  // üîç PATTERN SCANNING - Qu√©t c√°c pattern spam
  for (const { pattern, weight, description } of SPAM_PATTERNS) {
    const matches = content.match(pattern);
    if (matches && matches.length > 0) {
      const score = matches.length * weight;
      spamIndicators.push(description);
      riskScore += score;

      analysisDetails.push({
        type: description,
        matches: matches.length,
        score: score,
        examples: matches.slice(0, 3), // L·∫•y max 3 v√≠ d·ª•
      });
    }
  }

  // üìè CONTENT LENGTH ANALYSIS - Ph√¢n t√≠ch ƒë·ªô d√†i
  if (content.length < 10) {
    spamIndicators.push("N·ªôi dung qu√° ng·∫Øn");
    riskScore += 15;
    analysisDetails.push({
      type: "short_content",
      score: 15,
      details: `ƒê·ªô d√†i: ${content.length} k√Ω t·ª±`,
    });
  }

  // üì¢ CAPS ANALYSIS - Ph√¢n t√≠ch ch·ªØ hoa
  const upperCaseCount = (content.match(/[A-Z]/g) || []).length;
  const upperCaseRatio = upperCaseCount / content.length;

  if (upperCaseRatio > 0.7 && content.length > 10) {
    spamIndicators.push("Qu√° nhi·ªÅu ch·ªØ hoa");
    riskScore += 20;
    analysisDetails.push({
      type: "excessive_caps",
      score: 20,
      details: `T·ª∑ l·ªá ch·ªØ hoa: ${(upperCaseRatio * 100).toFixed(1)}%`,
    });
  }

  // üîÑ WORD REPETITION ANALYSIS - Ph√¢n t√≠ch l·∫∑p t·ª´
  const words = content
    .toLowerCase()
    .split(/\s+/)
    .filter((word) => word.length > 3);
  const wordCount = {};

  for (const word of words) {
    wordCount[word] = (wordCount[word] || 0) + 1;
  }

  const repeatedWords = Object.entries(wordCount).filter(
    ([word, count]) => count > 3
  );

  if (repeatedWords.length > 0) {
    const score = repeatedWords.length * 10;
    spamIndicators.push("L·∫∑p t·ª´ kh√≥a");
    riskScore += score;
    analysisDetails.push({
      type: "repeated_words",
      score: score,
      details: repeatedWords.map(([word, count]) => `"${word}": ${count} l·∫ßn`),
    });
  }

  // üéØ SPAM CLASSIFICATION - Ph√¢n lo·∫°i m·ª©c ƒë·ªô spam
  let spamLevel = "low";
  if (riskScore > 50) {
    spamLevel = "high";
  } else if (riskScore > 30) {
    spamLevel = "medium";
  }

  return {
    isSpam: riskScore > 30,
    spamLevel,
    spamIndicators,
    riskScore,
    analysisDetails,
    recommendation:
      riskScore > 50 ? "reject" : riskScore > 30 ? "review" : "approve",
  };
};

/**
 * ============================================================================
 * üéØ COMPREHENSIVE CONTENT ANALYSIS
 * ============================================================================
 */

/**
 * ü§ñ FUNCTION: Ph√¢n t√≠ch n·ªôi dung to√†n di·ªán (Content Analysis Engine)
 * @param {string} titleOrContent - Title (cho thread) ho·∫∑c content (cho reply)
 * @param {string} content - Content (optional, ch·ªâ d√πng cho thread)
 * @returns {Object} K·∫øt qu·∫£ ph√¢n t√≠ch chi ti·∫øt
 *
 * @logic WORKFLOW:
 * 1. Prepare and normalize content
 * 2. Check profanity violations
 * 3. Analyze spam patterns
 * 4. Calculate overall risk score
 * 5. Generate recommendations
 */
export const analyzeContent = (titleOrContent, content = null) => {
  // üìù PREPARE CONTENT - X·ª≠ l√Ω content linh ho·∫°t
  let fullContent = "";
  let isThreadAnalysis = content !== null;

  if (isThreadAnalysis) {
    // Thread analysis: c√≥ c·∫£ title v√† content
    fullContent = `${titleOrContent} ${content}`.trim();
    console.log("üîç Starting THREAD analysis:", {
      titleLength: titleOrContent?.length || 0,
      contentLength: content?.length || 0,
      totalLength: fullContent.length,
    });
  } else {
    // Reply analysis: ch·ªâ c√≥ content
    fullContent = titleOrContent?.trim() || "";
    console.log("üîç Starting REPLY analysis:", {
      contentLength: fullContent.length,
    });
  }

  // üî• PROFANITY ANALYSIS - Ki·ªÉm tra t·ª´ ng·ªØ vi ph·∫°m
  const profanityCheck = checkProfanity(fullContent);
  console.log("üö´ Profanity check result:", {
    violations: profanityCheck.totalViolations,
    severity: profanityCheck.severity,
    score: profanityCheck.riskScore,
  });

  // üïµÔ∏è SPAM ANALYSIS - Ki·ªÉm tra spam
  const spamCheck = checkSpam(fullContent);
  console.log("üìß Spam check result:", {
    isSpam: spamCheck.isSpam,
    level: spamCheck.spamLevel,
    score: spamCheck.riskScore,
  });

  // üìä OVERALL RISK CALCULATION - T√≠nh to√°n r·ªßi ro t·ªïng th·ªÉ
  const combinedScore = profanityCheck.riskScore + spamCheck.riskScore;
  let overallRisk = "low";
  let shouldReject = false;
  let shouldFlag = false;

  // üö® DECISION LOGIC - Logic quy·∫øt ƒë·ªãnh
  if (profanityCheck.severity === "critical" || combinedScore > 80) {
    overallRisk = "critical";
    shouldReject = true;
  } else if (profanityCheck.severity === "high" || combinedScore > 60) {
    overallRisk = "high";
    shouldFlag = true;
  } else if (profanityCheck.severity === "medium" || combinedScore > 30) {
    overallRisk = "medium";
    shouldFlag = true;
  }

  // üìã GENERATE RECOMMENDATIONS - T·∫°o khuy·∫øn ngh·ªã
  const recommendations = {
    action: shouldReject ? "reject" : shouldFlag ? "review" : "approve",
    reason: shouldReject
      ? "N·ªôi dung ch·ª©a t·ª´ ng·ªØ kh√¥ng ph√π h·ª£p nghi√™m tr·ªçng ho·∫∑c spam"
      : shouldFlag
      ? "N·ªôi dung c·∫ßn ƒë∆∞·ª£c xem x√©t do c√≥ d·∫•u hi·ªáu vi ph·∫°m"
      : "N·ªôi dung ƒë∆∞·ª£c ch·∫•p nh·∫≠n",
    confidence:
      combinedScore > 60 ? "high" : combinedScore > 30 ? "medium" : "low",
    suggestedActions: shouldReject
      ? ["T·ª´ ch·ªëi b√†i vi·∫øt", "G·ª≠i th√¥ng b√°o cho user", "Ghi log vi ph·∫°m"]
      : shouldFlag
      ? ["ƒê∆∞a v√†o h√†ng ƒë·ª£i ki·ªÉm duy·ªát", "Th√¥ng b√°o cho moderator"]
      : ["Ph√™ duy·ªát t·ª± ƒë·ªông", "ƒêƒÉng b√†i ngay l·∫≠p t·ª©c"],
  };

  console.log("üéØ Final analysis result:", {
    type: isThreadAnalysis ? "THREAD" : "REPLY",
    overallRisk,
    combinedScore,
    action: recommendations.action,
  });

  return {
    profanity: profanityCheck,
    spam: spamCheck,
    overallRisk,
    combinedScore,
    shouldReject,
    shouldFlag,
    recommendations,
    analysisMetadata: {
      analyzedAt: new Date(),
      contentLength: fullContent.length,
      isThreadAnalysis,
      processingTime: Date.now(),
    },
  };
};

/**
 * ============================================================================
 * üéØ MODERATION ACTION SUGGESTION
 * ============================================================================
 */

/**
 * ü§ñ FUNCTION: ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông moderation d·ª±a tr√™n user profile v√† content analysis
 * @param {Object} user - Th√¥ng tin user
 * @param {Object} contentAnalysis - K·∫øt qu·∫£ ph√¢n t√≠ch n·ªôi dung
 * @param {string} contentType - "thread" ho·∫∑c "reply" ƒë·ªÉ √°p d·ª•ng logic kh√°c nhau
 * @returns {string} H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t: "approve", "review", "reject"
 *
 * @logic DECISION TREE:
 * 1. Check user role (admin/moderator = auto approve)
 * 2. Check content severity (critical = auto reject)
 * 3. Apply different rules for thread vs reply
 * 4. Consider user trust level + content risk
 */
export const suggestModerationAction = (
  user,
  contentAnalysis,
  contentType = "thread"
) => {
  const { overallRisk, shouldReject, combinedScore } = contentAnalysis;

  console.log(
    `ü§ñ Suggesting moderation action for ${contentType.toUpperCase()}:`,
    {
      userRole: user.role,
      trustLevel: user.trustLevel,
      overallRisk,
      combinedScore,
    }
  );

  // üëë ADMIN/MODERATOR BYPASS - Admin v√† Moderator ƒë∆∞·ª£c approve ngay
  if (user.role === "admin" || user.role === "moderator") {
    console.log("üëë Auto-approve: Admin/Moderator bypass");
    return "approve";
  }

  // üö´ CRITICAL CONTENT REJECTION - N·ªôi dung vi ph·∫°m nghi√™m tr·ªçng ‚Üí reject
  if (shouldReject || combinedScore > 80) {
    console.log("üö´ Auto-reject: Critical content violation");
    return "reject";
  }

  // üìä USER REPUTATION CHECK - Ki·ªÉm tra danh ti·∫øng user
  const userStats = user.forumStats || {};
  const postsCount = userStats.postsCount || 0;
  const reportsReceived = userStats.reportsReceived || 0;
  const likesReceived = userStats.likesReceived || 0;

  // üö® BAD REPUTATION - User c√≥ l·ªãch s·ª≠ x·∫•u ‚Üí review ngay c·∫£ v·ªõi n·ªôi dung ok
  if (
    reportsReceived > 3 ||
    (postsCount > 5 && reportsReceived > postsCount * 0.3)
  ) {
    console.log("üö® Force review: Bad user reputation");
    return contentType === "reply" ? "reject" : "review"; // Reply t·ª´ ch·ªëi lu√¥n, thread review
  }

  // ===============================
  // üßµ THREAD MODERATION LOGIC
  // ===============================
  if (contentType === "thread") {
    console.log("üßµ Applying THREAD moderation logic");

    // üèÜ TRUSTED USER LOGIC - Logic cho user tin c·∫≠y
    if (user.trustLevel === "trusted" || user.autoApprovalEnabled) {
      if (overallRisk === "low" || combinedScore < 20) {
        console.log("üèÜ Thread approved: Trusted user + safe content");
        return "approve";
      } else {
        console.log("üîç Thread review: Trusted user + risky content");
        return "review";
      }
    }

    // üÜï NEW USER LOGIC - User m·ªõi PH·∫¢I ki·ªÉm duy·ªát thread
    if (user.trustLevel === "new" || postsCount < 5) {
      console.log("üÜï Thread review: New user (all threads require approval)");
      return "review"; // User m·ªõi lu√¥n ph·∫£i qua ki·ªÉm duy·ªát thread
    }

    // üìù BASIC USER LOGIC - Logic cho user th∆∞·ªùng
    if (user.trustLevel === "basic" || (postsCount >= 5 && postsCount < 15)) {
      if (overallRisk === "low" && combinedScore < 10) {
        console.log("üìù Thread approved: Basic user + very safe content");
        return "approve";
      } else {
        console.log("üîç Thread review: Basic user + questionable content");
        return "review";
      }
    }

    // üìä REGULAR USER LOGIC - Logic cho user b√¨nh th∆∞·ªùng
    if (overallRisk === "low" && combinedScore < 15) {
      console.log("üìä Thread approved: Regular user + safe content");
      return "approve";
    }

    console.log("üîç Thread review: Default case");
    return "review";
  }

  // ===============================
  // üí¨ REPLY MODERATION LOGIC
  // ===============================
  if (contentType === "reply") {
    console.log("üí¨ Applying REPLY moderation logic");

    // üí¨ REPLY PHILOSOPHY:
    // - Approve h·∫ßu h·∫øt replies ƒë·ªÉ UX m∆∞·ª£t m√†
    // - Ch·ªâ reject nh·ªØng reply c√≥ v·∫•n ƒë·ªÅ r√µ r√†ng
    // - Kh√¥ng c√≥ pending/review cho reply

    // üö´ PROFANITY VIOLATIONS - Reject reply c√≥ t·ª´ t·ª•c t·ªâu
    if (
      contentAnalysis.profanity.isViolation &&
      contentAnalysis.profanity.totalViolations > 0
    ) {
      console.log("‚ùå Reply rejected: Contains profanity");
      return "reject";
    }

    // üî• HIGH RISK CONTENT - Reject reply c√≥ risk cao
    if (overallRisk === "high" || combinedScore > 50) {
      console.log("‚ùå Reply rejected: High risk content");
      return "reject";
    }

    // ‚úÖ AUTO-APPROVE ALL OTHER CASES - Approve t·∫•t c·∫£ tr∆∞·ªùng h·ª£p c√≤n l·∫°i
    console.log("‚úÖ Reply approved: Safe content (default for replies)");
    return "approve";
  }

  // üîç DEFAULT FALLBACK
  console.log("üîç Default review: Unknown content type");
  return "review";
};

/**
 * ============================================================================
 * üßπ CONTENT CLEANING UTILITIES
 * ============================================================================
 */

/**
 * üßπ FUNCTION: L·ªçc v√† l√†m s·∫°ch n·ªôi dung (Content Sanitization)
 * @param {string} content - N·ªôi dung g·ªëc
 * @returns {string} N·ªôi dung ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
 *
 * @logic WORKFLOW:
 * 1. Replace banned words v·ªõi d·∫•u *
 * 2. Remove/mask URLs, emails, phone numbers
 * 3. Clean excessive special characters
 * 4. Return sanitized content
 */
export const cleanContent = (content) => {
  let cleanedContent = content;

  console.log("üßπ Starting content cleaning process");

  // üö´ REPLACE BANNED WORDS - Thay th·∫ø t·ª´ ng·ªØ nh·∫°y c·∫£m
  for (const word of BANNED_WORDS) {
    const regex = new RegExp(word, "gi");
    const replacement = "*".repeat(word.length);
    cleanedContent = cleanedContent.replace(regex, replacement);
  }

  // üîó REMOVE LINKS - Lo·∫°i b·ªè c√°c link
  cleanedContent = cleanedContent.replace(
    /\bhttp[s]?:\/\/\S+/g,
    "[LINK_REMOVED]"
  );

  // üì± REMOVE PHONE NUMBERS - Lo·∫°i b·ªè s·ªë ƒëi·ªán tho·∫°i
  cleanedContent = cleanedContent.replace(/\b\d{10,11}\b/g, "[PHONE_REMOVED]");

  // üìß REMOVE EMAILS - Lo·∫°i b·ªè email
  cleanedContent = cleanedContent.replace(
    /\b\w+@\w+\.\w+\b/g,
    "[EMAIL_REMOVED]"
  );

  // üé≠ REMOVE EXCESSIVE SPECIAL CHARS - Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát th·ª´a
  cleanedContent = cleanedContent.replace(/[!@#$%^&*]{3,}/g, "***");

  // üîÑ REMOVE EXCESSIVE REPETITION - Lo·∫°i b·ªè l·∫∑p k√Ω t·ª±
  cleanedContent = cleanedContent.replace(/(.)\1{4,}/g, "$1$1$1");

  console.log("üßπ Content cleaning completed");

  return cleanedContent.trim();
};

/**
 * ============================================================================
 * üìä ANALYTICS & REPORTING
 * ============================================================================
 */

/**
 * üìà FUNCTION: T·∫°o b√°o c√°o ph√¢n t√≠ch chi ti·∫øt
 * @param {Object} analysis - K·∫øt qu·∫£ ph√¢n t√≠ch
 * @returns {Object} B√°o c√°o chi ti·∫øt
 */
export const generateAnalysisReport = (analysis) => {
  return {
    summary: {
      overallRisk: analysis.overallRisk,
      action: analysis.recommendations.action,
      confidence: analysis.recommendations.confidence,
      totalScore: analysis.combinedScore,
    },
    profanityDetails: {
      violationsFound: analysis.profanity.totalViolations,
      severity: analysis.profanity.severity,
      violatedWords: analysis.profanity.violatedWords,
    },
    spamDetails: {
      isSpam: analysis.spam.isSpam,
      spamLevel: analysis.spam.spamLevel,
      indicators: analysis.spam.spamIndicators,
      riskScore: analysis.spam.riskScore,
    },
    recommendations: analysis.recommendations,
    metadata: analysis.analysisMetadata,
  };
};
