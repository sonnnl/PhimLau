import axios from "axios";

// ===== API CONFIGURATION =====
const API_URL = process.env.REACT_APP_API_URL;

// T·∫°o axios instance ri√™ng cho Forum API
const forumApiClient = axios.create({
  baseURL: `${API_URL}/forum`,
});

// ===== INTERCEPTOR SETUP =====
// Th√™m token t·ª± ƒë·ªông n·∫øu c√≥
forumApiClient.interceptors.request.use((config) => {
  const token = localStorage.getItem("movieAppToken");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

/**
 * ===== FORUM CATEGORIES =====
 * L·∫•y t·∫•t c·∫£ danh m·ª•c di·ªÖn ƒë√†n t·ª´ backend
 * @returns {Promise<Array<Object>>} Danh s√°ch c√°c danh m·ª•c forum
 * @route GET /api/forum/categories
 */
export const fetchAllForumCategories = async () => {
  try {
    const response = await forumApiClient.get("/categories");

    // üîß FIX: Backend tr·∫£ v·ªÅ { success: true, data: [...] }
    // Frontend c·∫ßn array tr·ª±c ti·∫øp
    if (response.data.success && response.data.data) {
      return response.data.data; // Extract array from nested structure
    }

    // Fallback: n·∫øu backend tr·∫£ v·ªÅ array tr·ª±c ti·∫øp
    if (Array.isArray(response.data)) {
      return response.data;
    }

    // Default: empty array ƒë·ªÉ tr√°nh l·ªói .map
    console.warn("Unexpected API response structure:", response.data);
    return [];
  } catch (error) {
    console.error(
      "L·ªói khi l·∫•y danh m·ª•c forum:",
      error.response?.data || error.message
    );
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ l·∫•y danh m·ª•c forum");
  }
};

/**
 * L·∫•y danh s√°ch ch·ªß ƒë·ªÅ.
 * @param {object} params - C√°c tham s·ªë ƒë·ªÉ query.
 * @param {string} [params.categorySlug] - Slug c·ªßa danh m·ª•c ƒë·ªÉ l·ªçc.
 * @param {number} [params.page] - S·ªë trang hi·ªán t·∫°i.
 * @param {number} [params.limit] - S·ªë l∆∞·ª£ng ch·ªß ƒë·ªÅ m·ªói trang.
 * @param {string} [params.sort] - Chu·ªói ƒë·ªÉ s·∫Øp x·∫øp (v√≠ d·ª•: '-createdAt').
 * @returns {Promise<Object>} ƒê·ªëi t∆∞·ª£ng ch·ª©a danh s√°ch ch·ªß ƒë·ªÅ v√† th√¥ng tin ph√¢n trang.
 */
export const fetchForumThreadsWithFilters = async ({
  categorySlug,
  page,
  limit,
  sort,
} = {}) => {
  try {
    // Build URL parameters for API call
    const urlParams = new URLSearchParams();
    if (categorySlug) urlParams.append("category", categorySlug);
    if (page) urlParams.append("page", page.toString());
    if (limit) urlParams.append("limit", limit.toString());
    if (sort) urlParams.append("sort", sort);

    const response = await forumApiClient.get(
      `/threads?${urlParams.toString()}`
    );
    return response.data; // Backend returns: { success, count, pagination, category, threads }
  } catch (error) {
    console.error(
      "L·ªói khi l·∫•y danh s√°ch threads:",
      error.response?.data || error.message
    );
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch threads");
  }
};

/**
 * T·∫°o m·ªôt ch·ªß ƒë·ªÅ m·ªõi.
 * @param {object} threadData - D·ªØ li·ªáu c·ªßa ch·ªß ƒë·ªÅ (title, content, categoryId).
 * @param {string} token - JWT token c·ªßa ng∆∞·ªùi d√πng.
 * @returns {Promise<Object>} Ch·ªß ƒë·ªÅ v·ª´a t·∫°o.
 */
/**
 * üéØ T·∫†O THREAD M·ªöI - Optimized with clear response handling
 * @param {Object} threadData - D·ªØ li·ªáu thread (title, content, categoryId, movieMetadata)
 * @param {string} token - JWT token c·ªßa user
 * @returns {Promise<Object>} Response v·ªõi moderation info
 */
export const createThread = async (threadData, token) => {
  try {
    const response = await forumApiClient.post("/threads", threadData, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    // Validate response structure
    const data = response.data;

    if (!data.success) {
      throw new Error(data.message || "Ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá");
    }

    return data;
  } catch (error) {
    // Enhanced error handling v·ªõi c√°c tr∆∞·ªùng h·ª£p c·ª• th·ªÉ
    if (error.response?.status === 400) {
      const message = error.response.data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
      throw new Error(message);
    } else if (error.response?.status === 401) {
      throw new Error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
    } else if (error.response?.status === 403) {
      throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông n√†y.");
    } else if (error.response?.status === 429) {
      throw new Error("B·∫°n ƒë√£ t·∫°o qu√° nhi·ªÅu b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } else if (error.response?.data?.message) {
      throw new Error(error.response.data.message);
    } else {
      throw new Error("Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  }
};

/**
 * T·∫°o m·ªôt tr·∫£ l·ªùi m·ªõi cho ch·ªß ƒë·ªÅ.
 * @param {string} threadId - ID c·ªßa ch·ªß ƒë·ªÅ.
 * @param {object} replyData - D·ªØ li·ªáu tr·∫£ l·ªùi (content).
 * @param {string} token - JWT token c·ªßa ng∆∞·ªùi d√πng.
 * @returns {Promise<Object>} Tr·∫£ l·ªùi v·ª´a t·∫°o.
 */
export const createReply = async (threadId, replyData, token) => {
  try {
    const response = await forumApiClient.post(
      `/threads/${threadId}/replies`,
      replyData,
      {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      }
    );
    return response.data;
  } catch (error) {
    console.error(
      `L·ªói khi t·∫°o reply cho thread ${threadId}:`,
      error.response?.data || error.message
    );
    throw (
      error.response?.data ||
      new Error(`Kh√¥ng th·ªÉ t·∫°o reply cho thread ${threadId}`)
    );
  }
};

/**
 * üö® T·∫†O B√ÅO C√ÅO N·ªòI DUNG VI PH·∫†M
 * @param {object} reportData - D·ªØ li·ªáu b√°o c√°o
 * @param {string} reportData.reportType - Lo·∫°i b√°o c√°o ("thread" ho·∫∑c "reply")
 * @param {string} reportData.targetId - ID c·ªßa thread ho·∫∑c reply b·ªã b√°o c√°o
 * @param {string} reportData.reason - L√Ω do b√°o c√°o
 * @param {string} [reportData.description] - M√¥ t·∫£ chi ti·∫øt
 * @returns {Promise<Object>} B√°o c√°o v·ª´a t·∫°o
 * @route POST /api/forum/reports
 */
export const createReport = async (reportData) => {
  try {
    const response = await forumApiClient.post("/reports", reportData);
    return response.data;
  } catch (error) {
    // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ
    if (error.response?.status === 401) {
      throw new Error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b√°o c√°o");
    } else if (error.response?.status === 400) {
      throw new Error(
        error.response.data.message || "D·ªØ li·ªáu b√°o c√°o kh√¥ng h·ª£p l·ªá"
      );
    } else if (error.response?.status === 429) {
      throw new Error("B·∫°n ƒë√£ b√°o c√°o qu√° nhi·ªÅu. Vui l√≤ng th·ª≠ l·∫°i sau");
    } else {
      throw new Error(error.response?.data?.message || "Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o");
    }
  }
};

/**
 * L·∫•y chi ti·∫øt m·ªôt ch·ªß ƒë·ªÅ b·∫±ng slug, bao g·ªìm c√°c replies ƒë√£ ph√¢n trang.
 * @param {string} slug - Slug c·ªßa ch·ªß ƒë·ªÅ.
 * @param {object} [params] - C√°c tham s·ªë t√πy ch·ªçn.
 * @param {number} [params.page] - Trang c·ªßa danh s√°ch tr·∫£ l·ªùi.
 * @param {number} [params.limit] - S·ªë l∆∞·ª£ng tr·∫£ l·ªùi m·ªói trang.
 * @returns {Promise<Object>} ƒê·ªëi t∆∞·ª£ng ch·ª©a chi ti·∫øt ch·ªß ƒë·ªÅ v√† danh s√°ch tr·∫£ l·ªùi.
 */
export const getThreadBySlug = async (slug, { page, limit } = {}) => {
  try {
    const params = new URLSearchParams();
    if (page) params.append("page", page.toString());
    if (limit) params.append("limit", limit.toString());

    const response = await forumApiClient.get(
      `/threads/${slug}?${params.toString()}`
    );
    // Backend tr·∫£ v·ªÅ: { success, thread, replies: { data, pagination } }
    return response.data;
  } catch (error) {
    console.error(
      `L·ªói khi l·∫•y thread ${slug}:`,
      error.response?.data || error.message
    );
    throw error.response?.data || new Error(`Kh√¥ng th·ªÉ l·∫•y thread ${slug}`);
  }
};

/**
 * üé¨ T·∫†O THREAD V·ªöI MOVIE METADATA
 * @param {object} threadData - D·ªØ li·ªáu thread bao g·ªìm movieMetadata
 * @param {string} token - JWT token
 * @returns {Promise<Object>} Thread v·ª´a t·∫°o
 */
export const createThreadWithMovie = async (threadData, token) => {
  try {
    const response = await forumApiClient.post("/threads", threadData, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    return response.data;
  } catch (error) {
    console.error(
      "L·ªói khi t·∫°o thread v·ªõi movie:",
      error.response?.data || error.message
    );
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ t·∫°o thread v·ªõi phim");
  }
};

/**
 * üé¨ L·∫§Y THREADS THEO MOVIE ID
 * @param {string} movieId - ID c·ªßa phim
 * @param {object} [params] - Tham s·ªë query (page, limit)
 * @returns {Promise<Object>} Danh s√°ch threads c·ªßa phim
 */
export const getThreadsByMovie = async (
  movieId,
  { page = 1, limit = 15 } = {}
) => {
  try {
    const params = new URLSearchParams();
    if (page) params.append("page", page.toString());
    if (limit) params.append("limit", limit.toString());

    const response = await forumApiClient.get(
      `/threads/movie/${movieId}?${params.toString()}`
    );

    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y threads theo movie:", error);
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ l·∫•y threads theo phim");
  }
};

/**
 * üî• L·∫§Y MOVIE DISCUSSIONS TRENDING
 * @param {object} [params] - Tham s·ªë query (limit, timeframe)
 * @returns {Promise<Object>} Danh s√°ch phim trending
 */
export const getTrendingMovieDiscussions = async ({
  limit = 10,
  timeframe = "week",
} = {}) => {
  try {
    const params = new URLSearchParams();
    if (limit) params.append("limit", limit.toString());
    if (timeframe) params.append("timeframe", timeframe);

    const response = await forumApiClient.get(
      `/movie-discussions/trending?${params.toString()}`
    );

    return response.data;
  } catch (error) {
    console.error("L·ªói khi l·∫•y trending discussions:", error);
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ l·∫•y th·∫£o lu·∫≠n trending");
  }
};

/**
 * üîç SEARCH MOVIES t·ª´ API th·ª© 3 ƒë·ªÉ g·∫Øn v√†o thread
 * @param {string} keyword - T·ª´ kh√≥a t√¨m ki·∫øm
 * @returns {Promise<Object>} Danh s√°ch phim search ƒë∆∞·ª£c
 */
export const searchMoviesForThread = async (keyword) => {
  try {
    if (!keyword || keyword.trim().length < 2) {
      return { success: true, movies: [] };
    }

    const response = await axios.get(
      `${process.env.REACT_APP_API_URL}/api/movies/search/thread`,
      {
        params: { keyword: keyword.trim() },
      }
    );

    return response.data;
  } catch (error) {
    console.error("L·ªói khi t√¨m ki·∫øm phim:", error);
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ t√¨m ki·∫øm phim");
  }
};

/**
 * Soft-deletes a thread.
 * @param {string} threadId - The ID of the thread to delete.
 * @returns {Promise<Object>} Confirmation message.
 * @route DELETE /api/forum/threads/:threadId
 */
export const deleteThread = async (threadId) => {
  try {
    const response = await forumApiClient.delete(`/threads/${threadId}`);
    return response.data;
  } catch (error) {
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ x√≥a ch·ªß ƒë·ªÅ");
  }
};

/**
 * Soft-deletes a reply.
 * @param {string} replyId - The ID of the reply to delete.
 * @returns {Promise<Object>} Confirmation message.
 * @route DELETE /api/forum/replies/:replyId
 */
export const deleteReply = async (replyId) => {
  try {
    const response = await forumApiClient.delete(`/replies/${replyId}`);
    return response.data;
  } catch (error) {
    throw error.response?.data || new Error("Kh√¥ng th·ªÉ x√≥a tr·∫£ l·ªùi");
  }
};

// C√°c h√†m kh√°c s·∫Ω ƒë∆∞·ª£c th√™m v√†o ƒë√¢y (getThreadBySlug, createThread, createReply)
